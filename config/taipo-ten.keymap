#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/matrix.h>
#include <dt-bindings/zmk/hid_usage.h>
#include <dt-bindings/zmk/modifiers.h>

/ {
    behaviors {
        // One-shot modifier behavior definitions
        // You can add &caps_word, &kp_lpar etc. as needed if you use them.
        // &mod acts as a one-shot modifier. For example, &mod LSHFT means Left Shift as a one-shot.
        os_gui: os_gui {
            compatible = "zmk,behavior-mod";
            bindings = <&kp LC(RA(LG(N0)))>; // Placeholder, will be replaced with actual &mod LGUI
        };
    };

    combos {
        compatible = "zmk,combos";

        // Define ZMK_KEY_POSITION_<NAME> for clarity in combo definitions
        // These are just labels for your internal 0-9 positions based on your layout
        // ZMK internally maps them 0, 1, 2, ...
        // KP_R: Key 1 -> 0
        // KP_S: Key 2 -> 1
        // KP_N: Key 3 -> 2
        // KP_I: Key 4 -> 3
        // KP_SPACE: Key 5 -> 4
        // KP_A: Key 6 -> 5
        // KP_O: Key 7 -> 6
        // KP_T1: Key 8 (first t) -> 7
        // KP_T2: Key 9 (second t) -> 8
        // KP_BSPC: Key 10 -> 9

        // ----------------------------------------------------
        // Base Key Position Mapping for Combos (for readability)
        // These are not part of the ZMK config, just for your reference here
        #define KP_R 0
        #define KP_S 1
        #define KP_N 2
        #define KP_I 3
        #define KP_SPACE 4
        #define KP_A 5
        #define KP_O 6
        #define KP_T1 7
        #define KP_T2 8
        #define KP_BSPC 9
        // ----------------------------------------------------

        // Primary definition for 'e' - ARBITRARY: CHANGE THIS!
        // Assuming e = n + i (Key 3 + Key 4 -> Pos 2 + Pos 3)
        combo_e: combo_e {
            timeout-ms = <50>; // Adjust as needed
            key-positions = <KP_N KP_I>;
            bindings = <&kp E>;
        };

        // ALPHABETICAL COMBOS
        // 'A' - 'T' are base keys. Assuming these are single key presses.
        // A = a (Redundant if 'a' is a base key, not needed as a combo)
        // E = e (Defined above, it's ZMK_KC_E from n+i)
        // I = i (Redundant)
        // N = n (Redundant)
        // O = o (Redundant)
        // R = r (Redundant)
        // S = s (Redundant)
        // T = t (Redundant)

        combo_b: combo_b {
            timeout-ms = <50>;
            key-positions = <KP_R KP_S>;
            bindings = <&kp B>;
        };
        combo_c: combo_c { // C = o + e (o, n, i)
            timeout-ms = <50>;
            key-positions = <KP_O KP_N KP_I>;
            bindings = <&kp C>;
        };
        combo_d: combo_d { // D = a + e (a, n, i)
            timeout-ms = <50>;
            key-positions = <KP_A KP_N KP_I>;
            bindings = <&kp D>;
        };
        combo_f: combo_f { // F = s + i
            timeout-ms = <50>;
            key-positions = <KP_S KP_I>;
            bindings = <&kp F>;
        };
        combo_g: combo_g { // G = r + i
            timeout-ms = <50>;
            key-positions = <KP_R KP_I>;
            bindings = <&kp G>;
        };
        combo_h: combo_h { // H = t + e (t1, n, i)
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_N KP_I>;
            bindings = <&kp H>;
        };
        combo_j: combo_j { // J = a + n
            timeout-ms = <50>;
            key-positions = <KP_A KP_N>;
            bindings = <&kp J>;
        };
        combo_k: combo_k { // K = o + i
            timeout-ms = <50>;
            key-positions = <KP_O KP_I>;
            bindings = <&kp K>;
        };
        combo_l: combo_l { // L = a + o
            timeout-ms = <50>;
            key-positions = <KP_A KP_O>;
            bindings = <&kp L>;
        };
        combo_m: combo_m { // M = r + e (r, n, i)
            timeout-ms = <50>;
            key-positions = <KP_R KP_N KP_I>;
            bindings = <&kp M>;
        };
        combo_p: combo_p { // P = s + n
            timeout-ms = <50>;
            key-positions = <KP_S KP_N>;
            bindings = <&kp P>;
        };
        combo_q: combo_q { // Q = a + t
            timeout-ms = <50>;
            key-positions = <KP_A KP_T1>;
            bindings = <&kp Q>;
        };
        combo_u: combo_u { // U = o + t
            timeout-ms = <50>;
            key-positions = <KP_O KP_T1>;
            bindings = <&kp U>;
        };
        combo_v: combo_v { // V = s + e (s, n, i)
            timeout-ms = <50>;
            key-positions = <KP_S KP_N KP_I>;
            bindings = <&kp V>;
        };
        combo_w: combo_w { // W = a + i
            timeout-ms = <50>;
            key-positions = <KP_A KP_I>;
            bindings = <&kp W>;
        };
        combo_x: combo_x { // X = r + t
            timeout-ms = <50>;
            key-positions = <KP_R KP_T1>;
            bindings = <&kp X>;
        };
        combo_y: combo_y { // Y = n + i (This is also the trigger for 'e'. If you want unique outputs, you need unique triggers)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I>; // **WARNING: This conflicts with 'e' combo_e! Only one will trigger.**
                                        // You must change one of these combinations if you want both 'Y' and 'e' from distinct triggers.
                                        // For example, if 'e' is n+i, 'Y' could be n+i+space etc.
            bindings = <&kp Y>;
        };
        combo_z: combo_z { // Z = r + n
            timeout-ms = <50>;
            key-positions = <KP_R KP_N>;
            bindings = <&kp Z>;
        };

        // NUMBER COMBOS
        combo_n0: combo_n0 { // 0 = e + t + space (n, i, t1, space)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I KP_T1 KP_SPACE>;
            bindings = <&kp N0>;
        };
        combo_n1: combo_n1 { // 1 = e + o + space (n, i, o, space)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I KP_O KP_SPACE>;
            bindings = <&kp N1>;
        };
        combo_n2: combo_n2 { // 2 = t + o + space (t1, o, space)
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_O KP_SPACE>;
            bindings = <&kp N2>;
        };
        combo_n3: combo_n3 { // 3 = t + a + space (t1, a, space)
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_A KP_SPACE>;
            bindings = <&kp N3>;
        };
        combo_n4: combo_n4 { // 4 = o + a + space (o, a, space)
            timeout-ms = <50>;
            key-positions = <KP_O KP_A KP_SPACE>;
            bindings = <&kp N4>;
        };
        combo_n5: combo_n5 { // 5 = i + n + space (i, n, space)
            timeout-ms = <50>;
            key-positions = <KP_I KP_N KP_SPACE>;
            bindings = <&kp N5>;
        };
        combo_n6: combo_n6 { // 6 = i + s + space (i, s, space)
            timeout-ms = <50>;
            key-positions = <KP_I KP_S KP_SPACE>;
            bindings = <&kp N6>;
        };
        combo_n7: combo_n7 { // 7 = n + s + space (n, s, space)
            timeout-ms = <50>;
            key-positions = <KP_N KP_S KP_SPACE>;
            bindings = <&kp N7>;
        };
        combo_n8: combo_n8 { // 8 = n + r + space (n, r, space)
            timeout-ms = <50>;
            key-positions = <KP_N KP_R KP_SPACE>;
            bindings = <&kp N8>;
        };
        combo_n9: combo_n9 { // 9 = s + r + space (s, r, space)
            timeout-ms = <50>;
            key-positions = <KP_S KP_R KP_SPACE>;
            bindings = <&kp N9>;
        };

        // SYMBOL COMBOS (with backspace)
        combo_lprn: combo_lprn { // ( = e + backspace (n, i, bspc)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I KP_BSPC>;
            bindings = <&kp LPRN>;
        };
        combo_rprn: combo_rprn { // ) = i + backspace
            timeout-ms = <50>;
            key-positions = <KP_I KP_BSPC>;
            bindings = <&kp RPRN>;
        };
        combo_lbkt: combo_lbkt { // [ = t + backspace
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_BSPC>;
            bindings = <&kp LBKT>;
        };
        combo_rbkt: combo_rbkt { // ] = n + backspace
            timeout-ms = <50>;
            key-positions = <KP_N KP_BSPC>;
            bindings = <&kp RBKT>;
        };
        combo_lcbr: combo_lcbr { // { = o + backspace
            timeout-ms = <50>;
            key-positions = <KP_O KP_BSPC>;
            bindings = <&kp LCBR>;
        };
        combo_rcbr: combo_rcbr { // } = s + backspace
            timeout-ms = <50>;
            key-positions = <KP_S KP_BSPC>;
            bindings = <&kp RCBR>;
        };
        combo_lt: combo_lt { // < = a + backspace
            timeout-ms = <50>;
            key-positions = <KP_A KP_BSPC>;
            bindings = <&kp LT>;
        };
        combo_gt: combo_gt { // > = r + backspace
            timeout-ms = <50>;
            key-positions = <KP_R KP_BSPC>;
            bindings = <&kp GT>;
        };

        // MORE SYMBOL COMBOS
        combo_hash: combo_hash { // # = r + i + backspace
            timeout-ms = <50>;
            key-positions = <KP_R KP_I KP_BSPC>;
            bindings = <&kp HASH>;
        };
        combo_circ: combo_circ { // ^ = r + t + backspace
            timeout-ms = <50>;
            key-positions = <KP_R KP_T1 KP_BSPC>;
            bindings = <&kp CIRC>;
        };
        combo_star: combo_star { // * = a + n + backspace
            timeout-ms = <50>;
            key-positions = <KP_A KP_N KP_BSPC>;
            bindings = <&kp STAR>;
        };
        combo_dllr: combo_dllr { // $ = r + e + backspace (r, n, i, bspc)
            timeout-ms = <50>;
            key-positions = <KP_R KP_N KP_I KP_BSPC>;
            bindings = <&kp DLLR>;
        };
        combo_bslash: combo_bslash { // \ = o + i + space
            timeout-ms = <50>;
            key-positions = <KP_O KP_I KP_SPACE>;
            bindings = <&kp BSLASH>;
        };
        combo_pipe: combo_pipe { // | = o + i + backspace
            timeout-ms = <50>;
            key-positions = <KP_O KP_I KP_BSPC>;
            bindings = <&kp PIPE>;
        };
        combo_slash: combo_slash { // / = o + i
            timeout-ms = <50>;
            key-positions = <KP_O KP_I>;
            bindings = <&kp SLASH>;
        };
        combo_colon: combo_colon { // : = r + O (r + o)
            timeout-ms = <50>;
            key-positions = <KP_R KP_O>;
            bindings = <&kp COLON>;
        };
        combo_semicolon: combo_semicolon { // ; = r + o + space
            timeout-ms = <50>;
            key-positions = <KP_R KP_O KP_SPACE>;
            bindings = <&kp SEMICOLON>;
        };
        combo_comma: combo_comma { // , = n + e (n, n, i -> only n, i)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I>; // **WARNING: Conflicts with 'e' and 'Y' again.**
                                        // You must change one of these combinations.
                                        // E.g., n + i + s
            bindings = <&kp COMMA>;
        };
        combo_period: combo_period { // . = n + e + space (n, i, space)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I KP_SPACE>;
            bindings = <&kp DOT>;
        };
        combo_tilde: combo_tilde { // ~ = n + e + backspace (n, i, bspc)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I KP_BSPC>;
            bindings = <&kp TILDE>;
        };
        combo_at: combo_at { // @ = a + e + backspace (a, n, i, bspc)
            timeout-ms = <50>;
            key-positions = <KP_A KP_N KP_I KP_BSPC>;
            bindings = <&kp AT>;
        };
        combo_plus: combo_plus { // + = o + i + backspace (same as pipe)
            timeout-ms = <50>;
            key-positions = <KP_O KP_I KP_BSPC>; // **WARNING: Conflicts with '|'! Only one will trigger.**
            bindings = <&kp PLUS>;
        };
        combo_equal: combo_equal { // = = a + n + backspace (same as star)
            timeout-ms = <50>;
            key-positions = <KP_A KP_N KP_BSPC>; // **WARNING: Conflicts with '*'! Only one will trigger.**
            bindings = <&kp EQUAL>;
        };
        combo_amp: combo_amp { // & = a + i + backspace
            timeout-ms = <50>;
            key-positions = <KP_A KP_I KP_BSPC>;
            bindings = <&kp AMPS>;
        };
        combo_minus: combo_minus { // - = o + n
            timeout-ms = <50>;
            key-positions = <KP_O KP_N>;
            bindings = <&kp MINUS>;
        };
        combo_undr: combo_undr { // _ = o + n + space
            timeout-ms = <50>;
            key-positions = <KP_O KP_N KP_SPACE>;
            bindings = <&kp UNDERSCORE>;
        };
        combo_pct: combo_pct { // % = o + n + backspace
            timeout-ms = <50>;
            key-positions = <KP_O KP_N KP_BSPC>;
            bindings = <&kp PERCENT>;
        };
        combo_quest: combo_quest { // ? = t + i
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_I>;
            bindings = <&kp QMARK>;
        };
        combo_excl: combo_excl { // ! = t + i + space
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_I KP_SPACE>;
            bindings = <&kp EXCLAMATION>;
        };
        combo_squote: combo_squote { // ' = a + s
            timeout-ms = <50>;
            key-positions = <KP_A KP_S>;
            bindings = <&kp SQT>;
        };
        combo_dquote: combo_dquote { // " = a + s + space
            timeout-ms = <50>;
            key-positions = <KP_A KP_S KP_SPACE>;
            bindings = <&kp DQT>;
        };
        combo_bquote: combo_bquote { // ` = a + s + backspace
            timeout-ms = <50>;
            key-positions = <KP_A KP_S KP_BSPC>;
            bindings = <&kp GRAVE>;
        };

        // FUNCTIONAL/NAVIGATION COMBOS
        combo_tab: combo_tab { // TAB = s + n + i
            timeout-ms = <50>;
            key-positions = <KP_S KP_N KP_I>;
            bindings = <&kp TAB>;
        };
        combo_enter: combo_enter { // ENTER = o + t + e (o, t1, n, i)
            timeout-ms = <50>;
            key-positions = <KP_O KP_T1 KP_N KP_I>;
            bindings = <&kp RET>;
        };
        combo_esc: combo_esc { // ESC = o + t + e + space (o, t1, n, i, space)
            timeout-ms = <50>;
            key-positions = <KP_O KP_T1 KP_N KP_I KP_SPACE>;
            bindings = <&kp ESC>;
        };
        combo_left: combo_left { // LEFT = o + space
            timeout-ms = <50>;
            key-positions = <KP_O KP_SPACE>;
            bindings = <&kp LEFT>;
        };
        combo_up: combo_up { // UP = n + space
            timeout-ms = <50>;
            key-positions = <KP_N KP_SPACE>;
            bindings = <&kp UP>;
        };
        combo_right: combo_right { // RIGHT = e + space (n, i, space)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I KP_SPACE>; // **WARNING: Conflicts with '.' and '5'!**
            bindings = <&kp RIGHT>;
        };
        combo_down: combo_down { // DOWN = t + space
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_SPACE>;
            bindings = <&kp DOWN>;
        };

        combo_layer_switch: combo_layer_switch { // LAYER SWITCH = r + s + n + i
            timeout-ms = <50>;
            key-positions = <KP_R KP_S KP_N KP_I>;
            bindings = <&tog 1>; // Toggle to GAMING_LAYER (Layer 1)
        };

        // ONE SHOT KEYS (using &mod for modifiers, &kp for others)
        combo_gui: combo_gui { // GUI = e + i (n, i, i -> just n, i)
            timeout-ms = <50>;
            key-positions = <KP_N KP_I>; // **WARNING: Conflicts with 'e', 'Y', ','!**
            bindings = <&mod LGUI>; // One-shot Left GUI
        };
        combo_ctrl: combo_ctrl { // CTRL = t + n
            timeout-ms = <50>;
            key-positions = <KP_T1 KP_N>;
            bindings = <&mod LCTRL>; // One-shot Left CTRL
        };
        combo_alt: combo_alt { // ALT = o + s
            timeout-ms = <50>;
            key-positions = <KP_O KP_S>;
            bindings = <&mod LALT>; // One-shot Left ALT
        };
        combo_shift: combo_shift { // SHIFT = a + r
            timeout-ms = <50>;
            key-positions = <KP_A KP_R>;
            bindings = <&mod LSHFT>; // One-shot Left SHIFT
        };
        combo_del: combo_del { // DEL = s + n + i + space
            timeout-ms = <50>;
            key-positions = <KP_S KP_N KP_I KP_SPACE>;
            bindings = <&kp DEL>;
        };
        combo_fn: combo_fn { // FN = s + n + i + backspace
            timeout-ms = <50>;
            key-positions = <KP_S KP_N KP_I KP_BSPC>;
            bindings = <&kp FNC>; // ZMK doesn't have a generic "FN" keycode. Use a special one if you have a custom behavior or KC_APP or KC_FNC if your system supports it. KC_APP is Windows context menu.
        };
        // MACRO = a + o + t + e (0-9) - Example for '0'
        // This is a more advanced use case. You'd define custom behaviors for macros.
        // For simplicity, here's an example that types "MACRO 0".
        // If you want to type the digit '0', use &kp N0
        macro_0: macro_0 {
            timeout-ms = <50>;
            key-positions = <KP_A KP_O KP_T1 KP_N KP_I>; // a + o + t1 + e (n+i)
            bindings = <&macro_tap ZMK_MACRO_ARGS( (M), (A), (C), (R), (O), (SPACE), (N0) )>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // These are your 10 base physical keys
            bindings = <
                &kp R  &kp S  &kp N  &kp I  &kp SPACE // Pos 0-4
                &kp A  &kp O  &kp T  &kp T  &kp BSPC  // Pos 5-9 (Note: T twice, use KP_T1 and KP_T2 in combos)
            >;
        };

        gaming_layer {
            // Your gaming layer definition
            bindings = <
                &kp ESC  &kp S   &kp W   &kp T   &kp SPACE // Pos 0-4
                &kp LSHFT &kp A  &kp S   &kp D   &kp BSPC  // Pos 5-9
            >;
        };
    };
};