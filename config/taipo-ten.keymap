#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/modifiers.h> // Make sure this is included for &mod

#define KP_R 0
#define KP_S 1
#define KP_N 2
#define KP_I 3
#define KP_SPACE 4

#define KP_A 5
#define KP_O 6
#define KP_T 7
#define KP_E 8 // Note: This is the base key 'E', not the 'e' combo from previous iterations.
#define KP_BSPC 9


// Define a macro for combo boilerplate
#define COMBO_DEF(NAME, BINDINGS, KEYPOS_LIST) \
    combo_##NAME { \
        timeout-ms = <50>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS_LIST>; \
        layers = <0>; /* Combo active only on layer 0 */ \
    };

// Define a macro for combos that produce One-Shot Modifiers
#define COMBO_MOD(NAME, BINDING_MOD, KEYPOS_LIST) \
    combo_##NAME { \
        timeout-ms = <50>; \
        bindings = <BINDING_MOD>; \
        key-positions = <KEYPOS_LIST>; \
        layers = <0>; \
    };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp R       &kp S       &kp N       &kp I       &kp SPACE
                &kp A       &kp O       &kp T       &kp E       &kp BSPC
            >;
        };
    };

    combos {
        compatible = "zmk,combos";

        COMBO_DEF(B, &kp B, KP_R KP_S)
        COMBO_DEF(C, &kp C, KP_O KP_N KP_I)
        COMBO_DEF(D, &kp D, KP_A KP_N KP_I) // Added KP_I based on common D combo
        COMBO_DEF(F, &kp F, KP_S KP_I)
        COMBO_DEF(G, &kp G, KP_R KP_I)
        COMBO_DEF(H, &kp H, KP_T KP_N KP_I)
        COMBO_DEF(J, &kp J, KP_A KP_N)
        COMBO_DEF(K, &kp K, KP_O KP_I)
        COMBO_DEF(L, &kp L, KP_A KP_O)
        COMBO_DEF(M, &kp M, KP_R KP_N KP_I)
        COMBO_DEF(P, &kp P, KP_S KP_N)
        COMBO_DEF(Q, &kp Q, KP_A KP_T)
        COMBO_DEF(U, &kp U, KP_O KP_T)
        COMBO_DEF(V, &kp V, KP_S KP_N KP_I)
        COMBO_DEF(W, &kp W, KP_A KP_I)
        COMBO_DEF(X, &kp X, KP_R KP_T)
        COMBO_DEF(Y, &kp Y, KP_N KP_I KP_SPACE)
        COMBO_DEF(Z, &kp Z, KP_R KP_N)

        // CORRECTED NUMBER KEYCODES (ZMK uses N0, N1, etc. for the numbers 0-9)
        COMBO_DEF(N0, &kp N0, KP_N KP_I KP_T KP_SPACE)
        COMBO_DEF(N1, &kp N1, KP_N KP_I KP_O KP_SPACE)
        COMBO_DEF(N2, &kp N2, KP_T KP_O KP_SPACE)
        COMBO_DEF(N3, &kp N3, KP_T KP_A KP_SPACE)
        COMBO_DEF(N4, &kp N4, KP_O KP_A KP_SPACE)
        COMBO_DEF(N5, &kp N5, KP_I KP_N KP_SPACE)
        COMBO_DEF(N6, &kp N6, KP_I KP_S KP_SPACE)
        COMBO_DEF(N7, &kp N7, KP_N KP_S KP_SPACE)
        COMBO_DEF(N8, &kp N8, KP_N KP_R KP_SPACE)
        COMBO_DEF(N9, &kp N9, KP_S KP_R KP_SPACE)

        // CORRECTED SYMBOL KEYCODES
        COMBO_DEF(LPAR, &kp LPAR, KP_N KP_I KP_BSPC)
        COMBO_DEF(RPAR, &kp RPAR, KP_I KP_BSPC)

        COMBO_DEF(LBKT, &kp LBKT, KP_T KP_BSPC)
        COMBO_DEF(RBKT, &kp RBKT, KP_N KP_BSPC)
        COMBO_DEF(LBRC, &kp LBRC, KP_O KP_BSPC)
        COMBO_DEF(RBRC, &kp RBRC, KP_S KP_BSPC)
        COMBO_DEF(LT,   &kp LT,   KP_A KP_BSPC)
        COMBO_DEF(GT,   &kp GT,   KP_R KP_BSPC)

        COMBO_DEF(HASH,        &kp HASH,      KP_R KP_I KP_BSPC)
        //COMBO_DEF(CIRC,      &kp CIRC,      KP_R KP_T KP_BSPC) 
        COMBO_DEF(ASTERISK,    &kp ASTERISK,  KP_A KP_N KP_BSPC)
        COMBO_DEF(DLLR,        &kp DLLR,      KP_R KP_N KP_I KP_BSPC) 
        COMBO_DEF(BSLASH,      &kp BSLASH,    KP_O KP_I KP_SPACE)
        COMBO_DEF(PIPE,        &kp PIPE,      KP_O KP_I KP_BSPC)
        COMBO_DEF(SLASH,       &kp SLASH,     KP_O KP_I)
        COMBO_DEF(COLON,       &kp COLON,     KP_R KP_O)
        COMBO_DEF(SEMICOLON,   &kp SCLN,      KP_R KP_O KP_SPACE) 
        COMBO_DEF(COMMA,       &kp COMMA,     KP_N KP_I KP_S)
        COMBO_DEF(DOT,         &kp DOT,       KP_N KP_I KP_SPACE)
        COMBO_DEF(TILDE,       &kp TILDE,     KP_N KP_I KP_BSPC)
        COMBO_DEF(AT,          &kp AT,        KP_A KP_N KP_I KP_BSPC)
        COMBO_DEF(PLUS,        &kp PLUS,      KP_O KP_I KP_BSPC KP_A)
        COMBO_DEF(EQUAL,       &kp EQUAL,     KP_A KP_N KP_BSPC KP_R)
        COMBO_DEF(AMPS,        &kp AMPS,      KP_A KP_I KP_BSPC)
        COMBO_DEF(MINUS,       &kp MINUS,     KP_O KP_N)
        COMBO_DEF(UNDERSCORE,&kp UNDER,     KP_O KP_N KP_SPACE) 
        COMBO_DEF(PERCENT,     &kp PERCENT,   KP_O KP_N KP_BSPC)
        COMBO_DEF(QMARK,       &kp QMARK,     KP_T KP_I)
        COMBO_DEF(EXCLAMATION,&kp EXCL,      KP_T KP_I KP_SPACE) 
        COMBO_DEF(SQT,         &kp SQT,       KP_A KP_S)
        COMBO_DEF(DQT,         &kp DQT,       KP_A KP_S KP_SPACE)
        COMBO_DEF(GRAVE,       &kp GRAVE,     KP_A KP_S KP_BSPC)

        COMBO_DEF(TAB,         &kp TAB,       KP_S KP_N KP_I)
        COMBO_DEF(ENTER,       &kp RET,       KP_O KP_T KP_N KP_I)
        COMBO_DEF(ESC,         &kp ESC,       KP_O KP_T KP_N KP_I KP_SPACE)
        COMBO_DEF(LEFT,        &kp LEFT,      KP_O KP_SPACE)
        COMBO_DEF(UP,          &kp UP,        KP_N KP_SPACE)
        COMBO_DEF(RIGHT,       &kp RIGHT,     KP_N KP_I KP_SPACE KP_T)
        COMBO_DEF(DOWN,        &kp DOWN,      KP_T KP_SPACE)

        // --- ONE SHOT MODIFIERS ---
        COMBO_MOD(GUI,   &mod LGUI,   KP_N KP_I)
        COMBO_MOD(CTRL,  &mod LCTRL,  KP_T KP_N)
        COMBO_MOD(ALT,   &mod LALT,   KP_O KP_S)
        COMBO_MOD(SHIFT, &mod LSHFT,  KP_A KP_R)
        COMBO_DEF(DEL,   &kp DEL,     KP_S KP_N KP_I KP_SPACE)
        COMBO_DEF(FN,    &kp FNC,     KP_S KP_N KP_I KP_BSPC) 
    };
};