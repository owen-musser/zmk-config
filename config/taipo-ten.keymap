#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/behaviors.h>

// Define our layer IDs
#define DEFAULT 0
#define GAMING 1

// --- Combo Definitions ---
// Note: ZMK evaluates combos based on physical key presses, not what they output in a layer.
// So, 'r' here refers to the physical key 'kr' (defined in the .dts), not the R keycode.
// Use &kp for key presses, &rgb_tog for RGB toggling, etc.

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp R     &kp S     &kp N     &kp I     &kp SPACE
                &kp A     &kp O     &kp T     &kp E     &kp BACKSPACE
            >;
        };

        gaming_layer {
            bindings = <
                &kp ESC   &kp S     &kp W     &kp T     &kp SPACE
                &kp LSHIFT &kp A    &kp S     &kp D     &kp BACKSPACE
            >;
        };
    };

    combos {
        compatible = "zmk,combos";

        // --- Alphabet Combos ---
        // Your layout lists A=a, I=i, N=n, O=o, R=r, S=s, T=t, E=e (implicitly)
        // These are already handled by the base layer.
        // We'll define the multi-key combos.

        combo_B {
            bindings = <&kp B>;
            key-positions = <&kr &ks>; // r + s
        };
        combo_C {
            bindings = <&kp C>;
            key-positions = <&ko &ke>; // o + e
        };
        combo_D {
            bindings = <&kp D>;
            key-positions = <&ka &ke>; // a + e
        };
        combo_F {
            bindings = <&kp F>;
            key-positions = <&ks &ki>; // s + i
        };
        combo_G {
            bindings = <&kp G>;
            key-positions = <&kr &ki>; // r + i
        };
        combo_H {
            bindings = <&kp H>;
            key-positions = <&kt &ke>; // t + e
        };
        combo_J {
            bindings = <&kp J>;
            key-positions = <&ka &kn>; // a + n
        };
        combo_K {
            bindings = <&kp K>;
            key-positions = <&ko &ki>; // o + i
        };
        combo_L {
            bindings = <&kp L>;
            key-positions = <&ka &ko>; // a + o
        };
        combo_M {
            bindings = <&kp M>;
            key-positions = <&kr &ke>; // r + e
        };
        combo_P {
            bindings = <&kp P>;
            key-positions = <&ks &kn>; // s + n
        };
        combo_Q {
            bindings = <&kp Q>;
            key-positions = <&ka &kt>; // a + t
        };
        combo_U {
            bindings = <&kp U>;
            key-positions = <&ko &kt>; // o + t
        };
        combo_V {
            bindings = <&kp V>;
            key-positions = <&ks &ke>; // s + e
        };
        combo_W {
            bindings = <&kp W>;
            key-positions = <&ka &ki>; // a + i
        };
        combo_X {
            bindings = <&kp X>;
            key-positions = <&kr &kt>; // r + t
        };
        combo_Y {
            bindings = <&kp Y>;
            key-positions = <&kn &ki>; // n + i
        };
        combo_Z {
            bindings = <&kp Z>;
            key-positions = <&kr &kn>; // r + n
        };

        // --- Number Combos (0-9) ---
        combo_N0 {
            bindings = <&kp N0>;
            key-positions = <&ke &kt &kspace>; // e + t + space
        };
        combo_N1 {
            bindings = <&kp N1>;
            key-positions = <&ke &ko &kspace>; // e + o + space
        };
        combo_N2 {
            bindings = <&kp N2>;
            key-positions = <&kt &ko &kspace>; // t + o + space
        };
        combo_N3 {
            bindings = <&kp N3>;
            key-positions = <&kt &ka &kspace>; // t + a + space
        };
        combo_N4 {
            bindings = <&kp N4>;
            key-positions = <&ko &ka &kspace>; // o + a + space
        };
        combo_N5 {
            bindings = <&kp N5>;
            key-positions = <&ki &kn &kspace>; // i + n + space
        };
        combo_N6 {
            bindings = <&kp N6>;
            key-positions = <&ki &ks &kspace>; // i + s + space
        };
        combo_N7 {
            bindings = <&kp N7>;
            key-positions = <&kn &ks &kspace>; // n + s + space
        };
        combo_N8 {
            bindings = <&kp N8>;
            key-positions = <&kn &kr &kspace>; // n + r + space
        };
        combo_N9 {
            bindings = <&kp N9>;
            key-positions = <&ks &kr &kspace>; // s + r + space
        };

        // --- Parentheses & Brackets Combos ---
        combo_LPAREN {
            bindings = <&kp LPAR>;
            key-positions = <&ke &kbksp>; // e + backspace
        };
        combo_RPAREN {
            bindings = <&kp RPAR>;
            key-positions = <&ki &kbksp>; // i + backspace
        };
        combo_LBKT {
            bindings = <&kp LBKT>;
            key-positions = <&kt &kbksp>; // t + backspace
        };
        combo_RBKT {
            bindings = <&kp RBKT>;
            key-positions = <&kn &kbksp>; // n + backspace
        };
        combo_LBRC {
            bindings = <&kp LBRC>;
            key-positions = <&ko &kbksp>; // o + backspace
        };
        combo_RBRC {
            bindings = <&kp RBRC>;
            key-positions = <&ks &kbksp>; // s + backspace
        };
        combo_LT { // <
            bindings = <&kp LT>;
            key-positions = <&ka &kbksp>; // a + backspace
        };
        combo_GT { // >
            bindings = <&kp GT>;
            key-positions = <&kr &kbksp>; // r + backspace
        };

        // --- Symbol Combos ---
        combo_HASH { // #
            bindings = <&kp HASH>;
            key-positions = <&kr &ki &kbksp>; // r + i + backspace
        };
        combo_CARET { // ^
            bindings = <&kp CARET>;
            key-positions = <&kr &kt &kbksp>; // r + t + backspace
        };
        combo_STAR { // * (Using ASTERISK for ZMK keycode)
            bindings = <&kp ASTERISK>;
            key-positions = <&ka &kn &kbksp>; // a + n + backspace
        };
        combo_DOLLAR { // $
            bindings = <&kp DLLR>;
            key-positions = <&kr &ke &kbksp>; // r + e + backspace
        };
        combo_BSLS { // \
            bindings = <&kp BSLASH>;
            key-positions = <&ko &ki &kspace>; // o + i + space
        };
        combo_PIPE { // |
            bindings = <&kp PIPE>;
            key-positions = <&ko &ki &kbksp>; // o + i + backspace
        };
        combo_FSLH { // /
            bindings = <&kp FSLH>;
            key-positions = <&ko &ki>; // o + i
        };
        combo_COLON { // :
            bindings = <&kp COLON>;
            key-positions = <&kr &ko>; // r + O (assuming 'O' refers to the key 'o')
            // If 'O' refers to the number 0, then you'd need a separate combo or behavior.
        };
        combo_SEMI { // ;
            bindings = <&kp SEMI>;
            key-positions = <&kr &ko &kspace>; // r + o + space
        };
        combo_COMMA { // ,
            bindings = <&kp COMMA>;
            key-positions = <&kn &ke>; // n + e
        };
        combo_PERIOD { // .
            bindings = <&kp PERIOD>;
            key-positions = <&kn &ke &kspace>; // n + e + space
        };
        combo_TILDE { // ~
            bindings = <&kp TILDE>;
            key-positions = <&kn &ke &kbksp>; // n + e + backspace
        };
        combo_AT { // @
            bindings = <&kp AT>;
            key-positions = <&ka &ke &kbksp>; // a + e + backspace
        };
        combo_PLUS { // +
            bindings = <&kp PLUS>;
            key-positions = <&ko &ki &kbksp>; // o + i + backspace (Duplicate with PIPE, verify intent)
        };
        combo_EQUAL { // =
            bindings = <&kp EQUAL>;
            key-positions = <&ka &kn &kbksp>; // a + n + backspace (Duplicate with STAR, verify intent)
        };
        combo_AMPERSAND { // &
            bindings = <&kp AMPS>;
            key-positions = <&ka &ki &kbksp>; // a + i + backspace
        };
        combo_MINUS { // -
            bindings = <&kp MINUS>;
            key-positions = <&ko &kn>; // o + n
        };
        combo_UNDERSCORE { // _
            bindings = <&kp UNDER>;
            key-positions = <&ko &kn &kspace>; // o + n + space
        };
        combo_PERCENT { // %
            bindings = <&kp PRCNT>;
            key-positions = <&ko &kn &kbksp>; // o + n + backspace
        };
        combo_QMARK { // ?
            bindings = <&kp QMARK>;
            key-positions = <&kt &ki>; // t + i
        };
        combo_EXCL { // !
            bindings = <&kp EXCLAMATION>;
            key-positions = <&kt &ki &kspace>; // t + i + space
        };
        combo_SINGLE_QUOTE { // '
            bindings = <&kp SQT>;
            key-positions = <&ka &ks>; // a + s
        };
        combo_DOUBLE_QUOTE { // "
            bindings = <&kp DQT>;
            key-positions = <&ka &ks &kspace>; // a + s + space
        };
        combo_GRAVE { // `
            bindings = <&kp GRAVE>;
            key-positions = <&ka &ks &kbksp>; // a + s + backspace
        };

        // --- Function Key Combos ---
        combo_TAB {
            bindings = <&kp TAB>;
            key-positions = <&ks &kn &ki>; // s + n + i
        };
        combo_ENTER {
            bindings = <&kp RET>;
            key-positions = <&ko &kt &ke>; // o + t + e
        };
        combo_ESC {
            bindings = <&kp ESC>;
            key-positions = <&ko &kt &ke &kspace>; // o + t + e + space
        };
        combo_LEFT {
            bindings = <&kp LEFT>;
            key-positions = <&ko &kspace>; // o + space
        };
        combo_UP {
            bindings = <&kp UP>;
            key-positions = <&kn &kspace>; // n + space
        };
        combo_RIGHT {
            bindings = <&kp RIGHT>;
            key-positions = <&ke &kspace>; // e + space
        };
        combo_DOWN {
            bindings = <&kp DOWN>;
            key-positions = <&kt &kspace>; // t + space
        };
        combo_LAYER_SWITCH {
            bindings = <&mo GAMING>; // Momentarily activate the GAMING layer
            key-positions = <&kr &ks &kn &ki>; // r + s + n + i
            // You might want &to (toggle) or &tg (toggle/tap) instead of &mo for some layers
        };

        // --- One-Shot Keys ---
        combo_GUI {
            bindings = <&os_gui>;
            key-positions = <&ke &ki>; // e + i
        };
        combo_CTRL {
            bindings = <&os_ctrl>;
            key-positions = <&kt &kn>; // t + n
        };
        combo_ALT {
            bindings = <&os_alt>;
            key-positions = <&ko &ks>; // o + s
        };
        combo_SHIFT {
            bindings = <&os_shift>;
            key-positions = <&ka &kr>; // a + r
        };
        combo_DEL {
            bindings = <&kp DEL>;
            key-positions = <&ks &kn &ki &kspace>; // s + n + i + space
        };
        combo_FN { // This would typically be a layer key, but can be a one-shot
            bindings = <&kp F24>; // Placeholder, FN usually switches layers. If it's a specific keycode.
            // If FN is meant to ctivate a Function layer, change to &mo <FN_LAYER_ID>
            key-positions = <&ks &kn &ki &kbksp>; // s + n + i + backspace
        };

        // --- Macro (for 0-9) ---

        macro_0_9 {
            // This macro sends "MACRO ACTIVATED" then "0123456789" as example
            // You'll need to define what these macros actually DO.
            bindings = <&macro_play
                // For a simple sequence:
                &kp MACRO
                &kp N0
                &kp N1
                &kp N2
                &kp N3
                &kp N4
                &kp N5
                &kp N6
                &kp N7
                &kp N8
                &kp N9
                >;
            key-positions = <&ka &ko &kt &ke>; // a + o + t + e
        };
    };
};