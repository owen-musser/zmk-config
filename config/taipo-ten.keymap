#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/modifiers.h> 
#define STICKY_TIMEOUT TIMEOUT_XLONG

#define KP_R 0
#define KP_S 1
#define KP_N 2
#define KP_I 3
#define KP_SPACE 4
#define HYPER LC(LA(LS(LGUI)))

#define KP_A 5
#define KP_O 6
#define KP_T 7
#define KP_E 8 
#define KP_BSPC 9

#define COMBO_DEF(NAME, BINDINGS, KEYPOS_LIST) \
    combo_##NAME { \
        timeout-ms = <200>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS_LIST>; \
        layers = <0>; \
    };

&mt {
    tapping-term-ms = <400>;
};
/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &mt LS(R) R       &mt LS(S) S       &mt LS(N) N       &mt LS(I) I       &kp SPACE
                &mt LS(A) A       &mt LS(O) O       &mt LS(T) T       &mt LS(E) E       &kp BSPC
            >;
        };
        game_layer {
            bindings = <
                &kp ESC       &kp T       &kp W       &kp TAB       &kp SPACE
                &kp LSHIFT       &kp A       &kp S       &kp D       &kp BSPC
            >;
        };
    };
 
    combos {
        compatible = "zmk,combos";

        COMBO_DEF(B, &mt LS(B) B, KP_R KP_S)
        COMBO_DEF(C, &mt LS(C) C, KP_O KP_E)
        COMBO_DEF(D, &mt LS(D) D, KP_A KP_E)
        COMBO_DEF(F, &mt LS(F) F, KP_S KP_I)
        COMBO_DEF(G, &mt LS(G) G, KP_R KP_I)
        COMBO_DEF(H, &mt LS(H) H, KP_T KP_E)
        COMBO_DEF(J, &mt LS(J) J, KP_A KP_N)
        COMBO_DEF(K, &mt LS(K) K, KP_O KP_I)
        COMBO_DEF(L, &mt LS(L) L, KP_A KP_O)
        COMBO_DEF(M, &mt LS(M) M, KP_R KP_E)
        COMBO_DEF(P, &mt LS(P) P, KP_S KP_N)
        COMBO_DEF(Q, &mt LS(Q) Q, KP_A KP_T)
        COMBO_DEF(U, &mt LS(U) U, KP_O KP_T)
        COMBO_DEF(V, &mt LS(V) V, KP_S KP_E)
        COMBO_DEF(W, &mt LS(W) W, KP_A KP_I)
        COMBO_DEF(X, &mt LS(X) X, KP_R KP_T)
        COMBO_DEF(Y, &mt LS(Y) Y, KP_N KP_I)
        COMBO_DEF(Z, &mt LS(Z) Z, KP_R KP_N)

        COMBO_DEF(N0, &kp N0, KP_E KP_T KP_SPACE)
        COMBO_DEF(N1, &kp N1, KP_E KP_O KP_SPACE)
        COMBO_DEF(N2, &kp N2, KP_T KP_O KP_SPACE)
        COMBO_DEF(N3, &kp N3, KP_T KP_A KP_SPACE)
        COMBO_DEF(N4, &kp N4, KP_O KP_A KP_SPACE)
        COMBO_DEF(N5, &kp N5, KP_I KP_N KP_SPACE)
        COMBO_DEF(N6, &kp N6, KP_I KP_S KP_SPACE)
        COMBO_DEF(N7, &kp N7, KP_N KP_S KP_SPACE)
        COMBO_DEF(N8, &kp N8, KP_N KP_R KP_SPACE)
        COMBO_DEF(N9, &kp N9, KP_S KP_R KP_SPACE)

        COMBO_DEF(LPAR, &kp LPAR, KP_E KP_BSPC)
        COMBO_DEF(RPAR, &kp RPAR, KP_I KP_BSPC)
        COMBO_DEF(LBKT, &kp LBKT, KP_T KP_BSPC)
        COMBO_DEF(RBKT, &kp RBKT, KP_N KP_BSPC)
        COMBO_DEF(LBRC, &kp LBRC, KP_O KP_BSPC)
        COMBO_DEF(RBRC, &kp RBRC, KP_S KP_BSPC)
        COMBO_DEF(LT,   &kp LT,   KP_A KP_BSPC)
        COMBO_DEF(GT,   &kp GT,   KP_R KP_BSPC)
        COMBO_DEF(HASH,        &kp HASH,      KP_R KP_I KP_BSPC)
        COMBO_DEF(CARET,      &kp CARET,      KP_R KP_T KP_BSPC) 
        COMBO_DEF(ASTERISK,    &kp ASTERISK,  KP_A KP_N KP_BSPC)
        COMBO_DEF(DLLR,        &kp DLLR,      KP_R KP_E KP_BSPC) 
        COMBO_DEF(BACKSLASH,      &kp BACKSLASH,    KP_O KP_I KP_SPACE)
        COMBO_DEF(PIPE,        &kp PIPE,      KP_O KP_I KP_BSPC)
        COMBO_DEF(SLASH,       &kp SLASH,     KP_O KP_I)
        COMBO_DEF(COLON,       &kp COLON,     KP_R KP_O)
        COMBO_DEF(SEMICOLON,   &kp SCLN,      KP_R KP_O KP_SPACE) 
        COMBO_DEF(COMMA,       &kp COMMA,     KP_N KP_E)
        COMBO_DEF(DOT,         &kp DOT,       KP_N KP_E KP_SPACE)
        COMBO_DEF(TILDE,       &kp TILDE,     KP_N KP_E KP_BSPC)
        COMBO_DEF(AT,          &kp AT,        KP_A KP_E KP_BSPC)
        COMBO_DEF(PLUS,        &kp PLUS,      KP_O KP_I KP_BSPC)
        COMBO_DEF(EQUAL,       &kp EQUAL,     KP_A KP_N KP_BSPC)
        COMBO_DEF(AMPS,        &kp AMPS,      KP_A KP_I KP_BSPC)
        COMBO_DEF(MINUS,       &kp MINUS,     KP_O KP_N)
        COMBO_DEF(UNDERSCORE,&kp UNDER,     KP_O KP_N KP_SPACE) 
        COMBO_DEF(PERCENT,     &kp PERCENT,   KP_O KP_N KP_BSPC)
        COMBO_DEF(QMARK,       &kp QMARK,     KP_T KP_I)
        COMBO_DEF(EXCLAMATION,&kp EXCL,      KP_T KP_I KP_SPACE) 
        COMBO_DEF(SQT,         &kp SQT,       KP_A KP_S)
        COMBO_DEF(DQT,         &kp DQT,       KP_A KP_S KP_SPACE)
        COMBO_DEF(GRAVE,       &kp GRAVE,     KP_A KP_S KP_BSPC)
        COMBO_DEF(TAB,         &kp TAB,       KP_S KP_N KP_I)
        COMBO_DEF(ENTER,       &kp RET,       KP_O KP_T KP_E)
        COMBO_DEF(ESC,         &kp ESC,       KP_O KP_T KP_E KP_SPACE)
        COMBO_DEF(LEFT,        &kp LEFT,      KP_O KP_SPACE)
        COMBO_DEF(UP,          &kp UP,        KP_N KP_SPACE)
        COMBO_DEF(RIGHT,       &kp RIGHT,     KP_E KP_SPACE)
        COMBO_DEF(DOWN,        &kp DOWN,      KP_T KP_SPACE)

        COMBO_DEF(BT0, &bt BT_SEL 0, KP_SPACE KP_BSPC KP_E)
        COMBO_DEF(BT1, &bt BT_SEL 1, KP_SPACE KP_BSPC KP_T)
        COMBO_DEF(BT2, &bt BT_SEL 2, KP_SPACE KP_BSPC KP_O)
        COMBO_DEF(BT_CLR, &bt BT_CLR, KP_SPACE KP_BSPC KP_A)

        COMBO_DEF(TOG1, &tog 1, KP_SPACE KP_BSPC KP_I)
        COMBO_DEF(TOG0, &tog 1, KP_SPACE KP_BSPC TAB)

        COMBO_DEF(GUI,   &sk LGUI,   KP_E KP_I)
        COMBO_DEF(CTRL,  &sk LCTRL,  KP_T KP_N)
        COMBO_DEF(HYPER,   &sk HYPER,   KP_O KP_S)
        COMBO_DEF(SHIFT, &sk LSHFT,  KP_A KP_R)
        COMBO_DEF(DEL,   &kp DEL,     KP_S KP_N KP_I KP_SPACE) 
    };
};